{
  "framework": "vue",
  "name": "vueless",
  "version": "0.0.94",
  "contributions": {
    "html": {
      "description-markup": "markdown",
      "types-syntax": "typescript",
      "tags": [
        {
          "name": "DayView",
          "description": "",
          "attributes": [
            {
              "name": "selectedDate",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "selectedDateTo",
              "value": {
                "kind": "expression",
                "type": "date|null"
              },
              "default": "undefined"
            },
            {
              "name": "activeDate",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "activeMonth",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "locale",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "object"
              }
            },
            {
              "name": "dateFormat",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "range",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "maxDate",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "minDate",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "config",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            }
          ],
          "events": [
            {
              "name": "input"
            }
          ],
          "source": {
            "module": "vueless/ui.form-calendar/components/DayView.vue",
            "symbol": "default"
          }
        },
        {
          "name": "MonthView",
          "description": "",
          "attributes": [
            {
              "name": "selectedDate",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "activeDate",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "activeMonth",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "locale",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "object"
              }
            },
            {
              "name": "dateFormat",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "maxDate",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "minDate",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "config",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            }
          ],
          "events": [
            {
              "name": "input"
            }
          ],
          "source": {
            "module": "vueless/ui.form-calendar/components/MonthView.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UAccordion",
          "description": "",
          "attributes": [
            {
              "name": "title",
              "required": true,
              "description": "Set component title.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "description",
              "required": true,
              "description": "Set component description.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "name",
              "required": true,
              "description": "@ignore: Set unique block name.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "size",
              "description": "The size of component.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "itemClicked"
            }
          ],
          "source": {
            "module": "vueless/ui.container-accordion/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UAlert",
          "description": "",
          "attributes": [
            {
              "name": "html",
              "description": "HTML or plain text.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "undefined"
            },
            {
              "name": "size",
              "description": "Hint size.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "Hint color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "grayscale"
            },
            {
              "name": "bordered",
              "description": "Show Alert with a border.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "timeout",
              "description": "Hint timeout.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "0"
            },
            {
              "name": "closeIcon",
              "description": "Show close button.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "UIService.get(defaultConfig, UAlert).default.closeIcon"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "hidden"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add something inside."
            }
          ],
          "source": {
            "module": "vueless/ui.text-alert/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UAvatar",
          "description": "",
          "attributes": [
            {
              "name": "src",
              "description": "Set avatar's image. It may be a URL or path from the \"public\" folder.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "The size of the avatar.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "The color of the avatar.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "grayscale"
            },
            {
              "name": "label",
              "description": "Avatar label (user name, nickname, etc.).",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "rounded",
              "description": "The rounded of the avatar.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg' | 'full'"
              },
              "default": "md"
            },
            {
              "name": "bordered",
              "description": "Active / disabled avatar border.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "click"
            }
          ],
          "source": {
            "module": "vueless/ui.image-avatar/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UBadge",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "required": true,
              "description": "Badge label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "variant",
              "description": "Badge variant.",
              "value": {
                "kind": "expression",
                "type": "'primary' | 'secondary' | 'thirdary'"
              },
              "default": "primary"
            },
            {
              "name": "size",
              "description": "Badge size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "weight",
              "description": "Badge font weight.",
              "value": {
                "kind": "expression",
                "type": "'regular' | 'medium' | 'bold'"
              },
              "default": "medium"
            },
            {
              "name": "color",
              "description": "Badge color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "focus"
            },
            {
              "name": "keydown"
            },
            {
              "name": "blur"
            },
            {
              "name": "click"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add something before text."
            },
            {
              "name": "default",
              "description": "Use it to add something instead of text."
            },
            {
              "name": "right",
              "description": "Use it to add something after text."
            }
          ],
          "source": {
            "module": "vueless/ui.text-badge/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UButton",
          "description": "",
          "attributes": [
            {
              "name": "variant",
              "description": "Button variant.",
              "value": {
                "kind": "expression",
                "type": "'primary' | 'secondary' | 'thirdary'"
              },
              "default": "primary"
            },
            {
              "name": "filled",
              "description": "Fill the background for thirdary variant.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "color",
              "description": "Button color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "size",
              "description": "Button size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "label",
              "description": "Button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "disabled",
              "description": "Disable the button.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "block",
              "description": "Make the Button fill the width with its container.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "pill",
              "description": "Set button corners rounded.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "square",
              "description": "Set the same paddings for the button.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "loading",
              "description": "Enable loader.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "click"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add something before text."
            },
            {
              "name": "default",
              "description": "Use it to add something instead of text."
            },
            {
              "name": "right",
              "description": "Use it to add something after text."
            }
          ],
          "source": {
            "module": "vueless/ui.button/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UCalendar",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Calendar value (timestamp).",
              "value": {
                "kind": "expression",
                "type": "number|object"
              },
              "default": "null"
            },
            {
              "name": "view",
              "description": "Calendar view.",
              "value": {
                "kind": "expression",
                "type": "'day' | 'month' | 'year'"
              },
              "default": "VIEW.day"
            },
            {
              "name": "range",
              "description": "Enable range selection.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "timepicker",
              "description": "Enable timepicker.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "dateFormat",
              "description": "Date format.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "Y-m-d"
            },
            {
              "name": "userFormat",
              "description": "User friendly date format.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "F j, Y"
            },
            {
              "name": "minDate",
              "description": "Min date in format date string or Date.",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "maxDate",
              "description": "Max date in format date string or Date.",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "update:view"
            },
            {
              "name": "input"
            },
            {
              "name": "submit"
            },
            {
              "name": "keydown"
            },
            {
              "name": "userDateChange"
            },
            {
              "name": "formattedDateChange"
            }
          ],
          "source": {
            "module": "vueless/ui.form-calendar/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UCard",
          "description": "",
          "attributes": [
            {
              "name": "title",
              "description": "Card title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Card description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "rounded",
              "description": "Card border radius.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "padding",
              "description": "Card padding.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "mobileFooterReverse",
              "description": "Reverse left and right footer blocks (in a mobile version only).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "header-left-before",
              "description": "Use it to add something before left side of the header."
            },
            {
              "name": "header-left",
              "description": "Use it to customise left side of the header."
            },
            {
              "name": "header-left-after",
              "description": "Use it to add something after left side of the header."
            },
            {
              "name": "header-right",
              "description": "Use it to customise right side of the header."
            },
            {
              "name": "default"
            },
            {
              "name": "footer-left",
              "description": "Use it to add something to the left side of the footer."
            },
            {
              "name": "footer-right",
              "description": "Use it to add something to the right side of the footer."
            }
          ],
          "source": {
            "module": "vueless/ui.container-card/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UCheckbox",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Checkbox value.",
              "value": {
                "kind": "expression",
                "type": "boolean|string|number|array|object"
              },
              "default": "false"
            },
            {
              "name": "value",
              "description": "Native value attribute.",
              "value": {
                "kind": "expression",
                "type": "boolean|string|number|array|object"
              },
              "default": "\"\""
            },
            {
              "name": "trueValue",
              "description": "Own value for checkbox checked state.",
              "value": {
                "kind": "expression",
                "type": "boolean|string|number|array|object"
              },
              "default": "true"
            },
            {
              "name": "falseValue",
              "description": "Own value for checkbox unchecked state.",
              "value": {
                "kind": "expression",
                "type": "boolean|string|number|array|object"
              },
              "default": "false"
            },
            {
              "name": "name",
              "description": "Checkbox name.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Checkbox label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Checkbox label description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "labelAlign",
              "description": "Label placement.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "left"
            },
            {
              "name": "color",
              "description": "Checkbox color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'"
              },
              "default": "brand"
            },
            {
              "name": "size",
              "description": "Checkbox size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "disabled",
              "description": "Make checkbox disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "partial",
              "description": "Make checkbox partially checked (change the checked tick to a minus).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "input"
            }
          ],
          "slots": [
            {
              "name": "footer"
            }
          ],
          "source": {
            "module": "vueless/ui.form-checkbox/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UCheckboxGroup",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Checkbox group label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "modelValue",
              "description": "Checkbox group value.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "options",
              "description": "Checkbox group options.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "error",
              "description": "Error description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "name",
              "description": "Name for each checkbox.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "disabled",
              "description": "Make checkbox disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "UIService.get(defaultConfig, UCheckboxGroup).default.disabled"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"checkbox\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.form-checkbox-group/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UCheckboxMultiState",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Checkbox value.",
              "value": {
                "kind": "expression",
                "type": "boolean|string|number"
              },
              "default": "\"\""
            },
            {
              "name": "options",
              "description": "Checkbox state options.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[{ value: \"\", icon: \"\", label: \"\", description: \"\" }]"
            },
            {
              "name": "name",
              "description": "Checkbox name.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Checkbox size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "Checkbox color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'"
              },
              "default": "brand"
            },
            {
              "name": "placement",
              "description": "Label placement.",
              "value": {
                "kind": "expression",
                "type": "'left' | 'right'"
              },
              "default": "left"
            },
            {
              "name": "disabled",
              "description": "Make checkbox disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "source": {
            "module": "vueless/ui.form-checkbox-multi-state/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UColorPicker",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Color picker selected value.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "colorOptions",
              "description": "Color picker colors.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "red,orange,amber,yellow,lime,green,emerald,teal,cyan,sky,blue,indigo,violet,purple,fuchsia,pink,rose"
            },
            {
              "name": "label",
              "description": "Color picker label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Color picker description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "error",
              "description": "Error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Color picker size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "name",
              "description": "Color picker name.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "disabled",
              "description": "Set color picker disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"radio\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "source": {
            "module": "vueless/ui.form-color-picker/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDataList",
          "description": "",
          "attributes": [
            {
              "name": "list",
              "description": "Data list array.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "group",
              "description": "Group name.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "nesting",
              "description": "Enables nesting.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "emptyTitle",
              "description": "Empty state title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "emptyDescription",
              "description": "Empty state description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "animationDuration",
              "description": "Drag animation duration.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "200"
            },
            {
              "name": "upperlined",
              "description": "Add line divider above the list.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "hideEmptyStateForNesting",
              "description": "@ignore: Disable empty state for nested elements if empty (internal prorps).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "dragSort"
            },
            {
              "name": "clickEdit"
            },
            {
              "name": "clickDelete"
            }
          ],
          "slots": [
            {
              "name": "default"
            },
            {
              "name": "icons",
              "description": "Use it to add icons."
            }
          ],
          "source": {
            "module": "vueless/ui.data-list/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDatePicker",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Datepicker label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "placeholder",
              "description": "Datepicker placeholder.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "modelValue",
              "description": "Datepicker value (timestamp).",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "null"
            },
            {
              "name": "minDate",
              "description": "Min date in format date string or Date.",
              "value": {
                "kind": "expression",
                "type": "string|date"
              },
              "default": "undefined"
            },
            {
              "name": "maxDate",
              "description": "Max date in format date string or Date.",
              "value": {
                "kind": "expression",
                "type": "string|date"
              },
              "default": "undefined"
            },
            {
              "name": "disabled",
              "description": "Disable component.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "timepicker",
              "description": "Enable timepicker.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "error",
              "description": "Error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Datepicker description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Datepicker size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "dateFormat",
              "description": "Date format.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "Y-m-d"
            },
            {
              "name": "userFormat",
              "description": "User friendly date format.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "F j, Y"
            },
            {
              "name": "id",
              "description": "@ignore: Unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "input"
            }
          ],
          "slots": [
            {
              "name": "left"
            },
            {
              "name": "right-icon"
            },
            {
              "name": "right"
            }
          ],
          "source": {
            "module": "vueless/ui.form-date-picker/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDatePickerRange",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Dater picker range value as object with from and to keys (timestamp).",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{\n  from: null,\n  to: null\n}"
            },
            {
              "name": "customRangeButton",
              "description": "Custom range button.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "[object Object]"
            },
            {
              "name": "variant",
              "description": "The variant of the date picker.",
              "value": {
                "kind": "expression",
                "type": "'button' | 'input'"
              },
              "default": "button"
            },
            {
              "name": "minDate",
              "description": "Min date in format date string or Date.",
              "value": {
                "kind": "expression",
                "type": "string|date"
              },
              "default": "undefined"
            },
            {
              "name": "maxDate",
              "description": "Max date in format date string or Date.",
              "value": {
                "kind": "expression",
                "type": "string|date"
              },
              "default": "undefined"
            },
            {
              "name": "size",
              "description": "Datepicker size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "label",
              "description": "Label text for input type.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "placeholder",
              "description": "Input placeholder for input type.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Datepicker description for input type.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "error",
              "description": "Error message for input type.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "disabled",
              "description": "Disable component.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "dateFormat",
              "description": "Date format.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "d.m.Y"
            },
            {
              "name": "id",
              "description": "@ignore: Unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "left"
            },
            {
              "name": "right-icon"
            },
            {
              "name": "right"
            }
          ],
          "source": {
            "module": "vueless/ui.form-date-picker-range/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDivider",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Divider label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Divider padding size.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl'"
              },
              "default": "md"
            },
            {
              "name": "variant",
              "description": "Divider color.",
              "value": {
                "kind": "expression",
                "type": "'light' | 'default' | 'dark'"
              },
              "default": "default"
            },
            {
              "name": "dashed",
              "description": "Set line dashed.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "dotted",
              "description": "Set line dotted.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "vertical",
              "description": "Set divider orientation to vertical.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noBorder",
              "description": "Remove border (keeps only spacings).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noPadding",
              "description": "Remove all paddings.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noTopPadding",
              "description": "Remove top padding.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noBottomPadding",
              "description": "Remove bottom padding.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noLeftPadding",
              "description": "Remove left padding.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noRightPadding",
              "description": "Remove right padding.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "source": {
            "module": "vueless/ui.container-divider/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDot",
          "description": "",
          "attributes": [
            {
              "name": "color",
              "description": "Dot color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "size",
              "description": "Dot size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "source": {
            "module": "vueless/ui.other-dot/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDropdownBadge",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Selected value.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Badge label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "variant",
              "description": "Badge variant.",
              "value": {
                "kind": "expression",
                "type": "'primary' | 'secondary' | 'thirdary'"
              },
              "default": "primary"
            },
            {
              "name": "color",
              "description": "Badge color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "size",
              "description": "Badge size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "weight",
              "description": "Badge font weight.",
              "value": {
                "kind": "expression",
                "type": "'regular' | 'medium' | 'bold'"
              },
              "default": "medium"
            },
            {
              "name": "noIcon",
              "description": "Hide dropdown icon.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "options",
              "description": "Options list.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "labelKey",
              "description": "Label key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"label\""
            },
            {
              "name": "valueKey",
              "description": "Value key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"id\""
            },
            {
              "name": "listYPosition",
              "description": "The position of dropdown list on the y-axis.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'bottom'"
              },
              "default": "bottom"
            },
            {
              "name": "listXPosition",
              "description": "The position of dropdown list on the x-axis.",
              "value": {
                "kind": "expression",
                "type": "'left' | 'right'"
              },
              "default": "left"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add dropdown list."
            }
          ],
          "source": {
            "module": "vueless/ui.dropdown-badge/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDropdownButton",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Selected value.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "variant",
              "description": "Button variant.",
              "value": {
                "kind": "expression",
                "type": "'primary' | 'secondary' | 'thirdary'"
              },
              "default": "primary"
            },
            {
              "name": "filled",
              "description": "Fill the background for thirdary variant.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "color",
              "description": "Button color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "size",
              "description": "Button size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "pill",
              "description": "Set button corners rounded.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "square",
              "description": "Set the same paddings for the button.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "disabled",
              "description": "Disable the link.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noIcon",
              "description": "Hide dropdown icon.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "options",
              "description": "Options list.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "labelKey",
              "description": "Label key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"label\""
            },
            {
              "name": "valueKey",
              "description": "Value key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"id\""
            },
            {
              "name": "listYPosition",
              "description": "The position of dropdown list on the y-axis.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'bottom'"
              },
              "default": "bottom"
            },
            {
              "name": "listXPosition",
              "description": "The position of dropdown list on the x-axis.",
              "value": {
                "kind": "expression",
                "type": "'left' | 'right'"
              },
              "default": "left"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add dropdown list."
            }
          ],
          "source": {
            "module": "vueless/ui.dropdown-button/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDropdownItem",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Set dropdown item label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "click"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.dropdown-item/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDropdownLink",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Selected value.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Link label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "color",
              "description": "Link color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "size",
              "description": "Link size.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "underlined",
              "description": "Add underline.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "undefined"
            },
            {
              "name": "dashed",
              "description": "Set dashed underline style.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "disabled",
              "description": "Disable the link.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noRing",
              "description": "Hide focus ring.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "noIcon",
              "description": "Hide dropdown icon.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "options",
              "description": "Options list.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "labelKey",
              "description": "Label key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"label\""
            },
            {
              "name": "valueKey",
              "description": "Value key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"id\""
            },
            {
              "name": "listYPosition",
              "description": "The position of dropdown list on the y-axis.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'bottom'"
              },
              "default": "bottom"
            },
            {
              "name": "listXPosition",
              "description": "The position of dropdown list on the x-axis.",
              "value": {
                "kind": "expression",
                "type": "'left' | 'right'"
              },
              "default": "left"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add dropdown list."
            }
          ],
          "source": {
            "module": "vueless/ui.dropdown-link/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UDropdownList",
          "description": "",
          "attributes": [
            {
              "name": "options",
              "description": "Set options list.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "labelKey",
              "description": "Label key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"label\""
            },
            {
              "name": "valueKey",
              "description": "Value key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"id\""
            },
            {
              "name": "groupLabel",
              "description": "Set a name of the property containing the group label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"label\""
            },
            {
              "name": "groupValues",
              "description": "Set a name of the property containing the group values.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "addOption",
              "description": "Show add new option button to the list.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "disabled",
              "description": "Disables the select.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "size",
              "description": "Set size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "maxHeight",
              "description": "List max height in pixels.",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "default": "undefined"
            },
            {
              "name": "optionHeight",
              "description": "List option height in pixels.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "40"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "addOption"
            }
          ],
          "slots": [
            {
              "name": "before-option",
              "description": "Use it to add something before option."
            },
            {
              "name": "option",
              "description": "Use it to add something before option."
            },
            {
              "name": "after-option",
              "description": "Use it to add something after option."
            },
            {
              "name": "empty"
            }
          ],
          "source": {
            "module": "vueless/ui.dropdown-list/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UEmpty",
          "description": "",
          "attributes": [
            {
              "name": "title",
              "description": "Sets title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Sets description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Sets component size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "header",
              "description": "Use it to add something to the header."
            },
            {
              "name": "default",
              "description": "Use it to add something inside."
            },
            {
              "name": "footer",
              "description": "Use it to add something to the footer."
            }
          ],
          "source": {
            "module": "vueless/ui.text-empty/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UFile",
          "description": "",
          "attributes": [
            {
              "name": "url",
              "description": "Set url link for the file.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "imageUrl",
              "description": "Set image url.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Set label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "left"
            },
            {
              "name": "right"
            }
          ],
          "source": {
            "module": "vueless/ui.text-file/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UFiles",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Set files label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Set description text.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "placement",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'topInside' | 'top' | 'left' | 'right'"
              },
              "default": "topInside"
            },
            {
              "name": "options",
              "description": "Set options for files.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "default"
            },
            {
              "name": "left",
              "description": "Use it to add something left."
            },
            {
              "name": "right",
              "description": "Use it to add something right."
            }
          ],
          "source": {
            "module": "vueless/ui.text-files/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UGroup",
          "description": "",
          "attributes": [
            {
              "name": "title",
              "description": "Set header title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "The distance between nested components.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "upperlined",
              "description": "Show line above the header.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "underlined",
              "description": "Show line under the header.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Set component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Set data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add something left side of the header."
            },
            {
              "name": "before-title",
              "description": "Use it to add something before title."
            },
            {
              "name": "after-title",
              "description": "Use it to add something after title."
            },
            {
              "name": "right",
              "description": "Use it to add something right side of the header."
            },
            {
              "name": "default",
              "description": "Use it to add something instead form."
            }
          ],
          "source": {
            "module": "vueless/ui.container-group/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UGroups",
          "description": "",
          "attributes": [
            {
              "name": "config",
              "description": "Set component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Set data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add something inside."
            }
          ],
          "source": {
            "module": "vueless/ui.container-groups/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UHeader",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Set label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Set size.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'"
              },
              "default": "md"
            },
            {
              "name": "weight",
              "description": "Set weight.",
              "value": {
                "kind": "expression",
                "type": "'regular' | 'medium' | 'bold'"
              },
              "default": "medium"
            },
            {
              "name": "color",
              "description": "Header color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "grayscale"
            },
            {
              "name": "multiline",
              "description": "Return default line height to the component (it may be useful for multiline headers).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "underlined",
              "description": "Show the underline.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.text-header/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UIcon",
          "description": "",
          "attributes": [
            {
              "name": "src",
              "description": "Icon SVG data source (svg as a vue component).",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "default": "\"\""
            },
            {
              "name": "name",
              "description": "Name of the icon.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": ""
            },
            {
              "name": "fill",
              "description": "Change icon variant from outline to filled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "color",
              "description": "Icon color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "grayscale"
            },
            {
              "name": "size",
              "description": "Icon size.",
              "value": {
                "kind": "expression",
                "type": "'3xs' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl'"
              },
              "default": "md"
            },
            {
              "name": "pill",
              "description": "Set pill mild semi-transparent background and solid colour icon.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "UIService.get(defaultConfig, UIcon).default.pill"
            },
            {
              "name": "variant",
              "description": "Icon variant.",
              "value": {
                "kind": "expression",
                "type": "'light' | 'default' | 'dark'"
              },
              "default": "default"
            },
            {
              "name": "interactive",
              "description": "Add interactive states to the icon (hover, clicked).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "tooltip",
              "description": "Add tooltip text on hover.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "tooltipSettings",
              "description": "Tooltip settings.\n[See all settings here](https://kabbouchi.github.io/vue-tippy/4.0/features/placement.html).",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "() => {}"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "internal",
              "description": "@ignore: Mark that Icon used inside Vueless components (used to get icons from vueless library).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "click"
            },
            {
              "name": "focus"
            },
            {
              "name": "blur"
            }
          ],
          "source": {
            "module": "vueless/ui.image-icon/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UInput",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Input value.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Input label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "labelAlign",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "topInside"
            },
            {
              "name": "placeholder",
              "description": "Input placeholder.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Input description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "error",
              "description": "Error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "false"
            },
            {
              "name": "size",
              "description": "Input size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "maxLength",
              "description": "Maximum character length.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "validationRule",
              "description": "Prevents input some characters (for ex. input numbers only).\nYou can use predefined values or your own RegExp.",
              "value": {
                "kind": "expression",
                "type": "'symbol' | 'string' | 'stringAndNumber' | 'number' | 'integer'"
              },
              "default": "\"\""
            },
            {
              "name": "type",
              "description": "Input type.",
              "value": {
                "kind": "expression",
                "type": "'text' | 'number' | 'email' | 'tel' | 'password' | 'url'"
              },
              "default": "text"
            },
            {
              "name": "inputMode",
              "description": "Input mode (to show different mobile keyboard).",
              "value": {
                "kind": "expression",
                "type": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'email' | 'url'"
              },
              "default": "text"
            },
            {
              "name": "readonly",
              "description": "Set input read-only.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "disabled",
              "description": "Disable the input.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noAutocomplete",
              "description": "Disable browsers autocomplete.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "id",
              "description": "@ignore: Unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "change"
            },
            {
              "name": "click"
            },
            {
              "name": "focus"
            },
            {
              "name": "mousedown"
            },
            {
              "name": "blur"
            },
            {
              "name": "input"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add some component before text."
            },
            {
              "name": "right-icon",
              "description": "Use it to add icon after text."
            },
            {
              "name": "right",
              "description": "Use it to add some component after text."
            }
          ],
          "source": {
            "module": "vueless/ui.form-input/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UInputFile",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Set label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Set description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "labelAlign",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "topInside"
            },
            {
              "name": "files",
              "description": "Set files data.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "local",
              "description": "Selected files will be imported when a form will be submitted",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "maxFileSize",
              "description": "Set max file size in megabytes.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "1"
            },
            {
              "name": "multiple",
              "description": "Allow to select multiple files.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "maxFiles",
              "description": "Set max number files for upload",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "3"
            },
            {
              "name": "allowedFileTypes",
              "description": "Set allowed file types.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": ".png,.jpg,.jpeg,.pdf,.txt,.doc,.docx,xls,.xlsx"
            },
            {
              "name": "error",
              "description": "Set error text for component.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Set size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "changeFiles"
            },
            {
              "name": "deleteFile"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.form-input-file/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UInputMoney",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Input value.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Input label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "labelOutside",
              "description": "Show label outside the input block.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "symbol",
              "description": "Currency symbol.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "$"
            },
            {
              "name": "placeholder",
              "description": "Input placeholder.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Input description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "error",
              "description": "Error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Input size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "decimalScale",
              "description": "Number of signs after the comma.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "2"
            },
            {
              "name": "decimalSeparator",
              "description": "A symbol used to separate the integer part from the fractional part of a number.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": ","
            },
            {
              "name": "thousandsSeparator",
              "description": "A symbol used to separate the thousand parts of a number.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": " "
            },
            {
              "name": "positiveOnly",
              "description": "Allow only positive values.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "rawValuePrefix",
              "description": "Show prefix in the raw value number.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "minus",
              "description": "Show minus sign.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "readonly",
              "description": "Set input read-only.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "disabled",
              "description": "Disable the input.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "id",
              "description": "@ignore: Unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "keyup"
            },
            {
              "name": "blur"
            },
            {
              "name": "input"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add something left."
            },
            {
              "name": "right",
              "description": "Use it to add something right."
            },
            {
              "name": "right-icon",
              "description": "Use it to add right icon."
            }
          ],
          "source": {
            "module": "vueless/ui.form-input-money/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UInputNumber",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "required": true,
              "description": "Input value.",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "step",
              "description": "Input step.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "1"
            },
            {
              "name": "min",
              "description": "Input min value.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "1"
            },
            {
              "name": "max",
              "description": "Input max value.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "999"
            },
            {
              "name": "label",
              "description": "Input label below number.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Input size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "source": {
            "module": "vueless/ui.form-input-number/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UInputRating",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Set input rating  label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "modelValue",
              "description": "Set input rating value.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "0"
            },
            {
              "name": "starsNumber",
              "description": "Set the number of stars.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "5"
            },
            {
              "name": "size",
              "description": "Set component size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "selectable",
              "description": "Make stars selectable.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "labelAlign",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "topInside"
            },
            {
              "name": "error",
              "description": "Set error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Set description text.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "noCounter",
              "description": "Hide / show counter.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "counter",
              "description": "Use it to add counter."
            },
            {
              "name": "right",
              "description": "Use it to add something right."
            }
          ],
          "source": {
            "module": "vueless/ui.form-input-rating/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UInputSearch",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Set component value.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Set input size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "disabled",
              "description": "Set input disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "text",
              "description": "Search button text..",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "searchButton",
              "description": "Show / hide search button.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "description",
              "description": "Input description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "labelOutside",
              "description": "Show label outside the input block.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "placeholder",
              "description": "Input placeholder.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Input label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "error",
              "description": "Error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "clear"
            },
            {
              "name": "search"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add something before text."
            },
            {
              "name": "right",
              "description": "Use it to add something before text."
            }
          ],
          "source": {
            "module": "vueless/ui.form-input-search/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "ULabel",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Set label value.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Set label size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "align",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "top"
            },
            {
              "name": "error",
              "description": "Set error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "false"
            },
            {
              "name": "description",
              "description": "Set description text.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "for",
              "description": "@ignore: Set id label for.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "disabled",
              "description": "Make label disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "click"
            },
            {
              "name": "mousedown"
            }
          ],
          "slots": [
            {
              "name": "default"
            },
            {
              "name": "footer"
            }
          ],
          "source": {
            "module": "vueless/ui.form-label/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "ULink",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "description": "Button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "url",
              "description": "Link url.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "route",
              "description": "Vue route object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "size",
              "description": "Link size.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "Link color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "type",
              "description": "Link open type behaviour.",
              "value": {
                "kind": "expression",
                "type": "'phone' | 'email' | 'link'"
              },
              "default": "link"
            },
            {
              "name": "targetBlank",
              "description": "Open link in new window.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "ariaCurrentValue",
              "description": "Pass value to the attribute aria-current when the link is exact active.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "page"
            },
            {
              "name": "custom",
              "description": "Whether RouterLink should not wrap its content in an a tag.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "replace",
              "description": "Whether RouterLink should not wrap its content in an a tag.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "activeClass",
              "description": "Apply classes to the link when its route is active or when it matches any parent route.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": ""
            },
            {
              "name": "exactActiveClass",
              "description": "Apply classes to the link when its route is active.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": ""
            },
            {
              "name": "wrapperActiveClass",
              "description": "Apply classes to the wrapper div when link route is active or when it matches any parent route.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": ""
            },
            {
              "name": "wrapperExactActiveClass",
              "description": "Apply classes to the wrapper div when link route is active.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": ""
            },
            {
              "name": "underlined",
              "description": "Show underline.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "undefined"
            },
            {
              "name": "dashed",
              "description": "Set link underline style as dashed.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "disabled",
              "description": "Disable the link.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "block",
              "description": "Make the Button fill the width with its container.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noRing",
              "description": "Remove outline ring on focus.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "click"
            },
            {
              "name": "mouseover"
            },
            {
              "name": "focus"
            },
            {
              "name": "blur"
            },
            {
              "name": "keydown"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add something before text."
            },
            {
              "name": "default",
              "description": "Use it replace the text."
            },
            {
              "name": "right",
              "description": "Use it to add something after text."
            }
          ],
          "source": {
            "module": "vueless/ui.button-link/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "ULoader",
          "description": "",
          "attributes": [
            {
              "name": "size",
              "description": "The size of the button.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "Loader color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            }
          ],
          "source": {
            "module": "vueless/ui.loader/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "ULoaderRendering",
          "description": "",
          "attributes": [
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            }
          ],
          "source": {
            "module": "vueless/ui.loader-rendering/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "ULoaderTop",
          "description": "",
          "attributes": [
            {
              "name": "resourceNames",
              "description": "The name of API resource (endpoint URI).",
              "value": {
                "kind": "expression",
                "type": "string|array"
              },
              "default": "\"\""
            },
            {
              "name": "color",
              "description": "The color of the loader stripe.",
              "value": {
                "kind": "expression",
                "type": "'gray' | 'red' | 'orange' | 'yellow' | 'green' | 'blue' | 'violet' | 'fuchsia'"
              },
              "default": "blue"
            }
          ],
          "source": {
            "module": "vueless/ui.loader-top/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "ULogo",
          "description": "",
          "attributes": [
            {
              "name": "src",
              "description": "Logo source path.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Logo label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "title",
              "description": "Logo title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "titleSize",
              "description": "Logo title size.",
              "value": {
                "kind": "expression",
                "type": "'2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'"
              },
              "default": "md"
            },
            {
              "name": "size",
              "description": "title size.",
              "value": {
                "kind": "expression",
                "type": "'2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl'"
              },
              "default": "md"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "click"
            }
          ],
          "source": {
            "module": "vueless/ui.image-logo/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UModal",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Change modal state (hidden / shown).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "title",
              "description": "Set modal title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "titleColor",
              "description": "The color of the title.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'"
              },
              "default": "UIService.get(defaultConfig, UModal).default.color"
            },
            {
              "name": "description",
              "description": "Sets modal description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "backRoute",
              "description": "Set back link route.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "width",
              "description": "Set width for modal.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl'"
              },
              "default": "sm"
            },
            {
              "name": "clickToClose",
              "description": "Allow closing modal by clicking on overlay.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "closeIcon",
              "description": "Allow closing modal by clicking on close icon.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "escToClose",
              "description": "Allow closing modal by pressing escape (esc) key.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "inner",
              "description": "Add extra top margin for modal inside another modal.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "noDivider",
              "description": "Hide divider between content end footer.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "mobileFooterReverse",
              "description": "Reverse left and right footer blocks (mobile version only).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "mobileBottomAlign",
              "description": "Attach small modal to the bottom of the screen (mobile version only).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Set component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "id",
              "description": "@ignore: Unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "dataCy",
              "description": "Set data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "back"
            }
          ],
          "slots": [
            {
              "name": "header-left-before",
              "description": "Use it to add something to the header left before."
            },
            {
              "name": "header-left",
              "description": "Use it to add something to the header left."
            },
            {
              "name": "header-left-after",
              "description": "Use it to add something to the header left after."
            },
            {
              "name": "header-right",
              "description": "Use it to add something to the header right."
            },
            {
              "name": "default",
              "description": "Use it to add something to the modal body."
            },
            {
              "name": "footer-left",
              "description": "Use it to add something to the footer left."
            },
            {
              "name": "footer-right",
              "description": "Use it to add something to the footer right."
            }
          ],
          "source": {
            "module": "vueless/ui.container-modal/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UModalConfirm",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Change modal state (hidden / shown).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "title",
              "description": "Set modal's title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "confirmLabel",
              "description": "Set confirm button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "confirmDisabled",
              "description": "Set the disabled accept-button.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "cancelButton",
              "description": "Show cancel button.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "color",
              "description": "Buttons and modal title color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'"
              },
              "default": "brand"
            },
            {
              "name": "width",
              "description": "Set width for modal.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl'"
              },
              "default": "sm"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            },
            {
              "name": "confirm"
            },
            {
              "name": "close"
            }
          ],
          "slots": [
            {
              "name": "header-left-before"
            },
            {
              "name": "header-left"
            },
            {
              "name": "header-left-after"
            },
            {
              "name": "header-right"
            },
            {
              "name": "default"
            },
            {
              "name": "footer-left"
            },
            {
              "name": "footer-right"
            }
          ],
          "source": {
            "module": "vueless/ui.container-modal-confirm/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UMoney",
          "description": "",
          "attributes": [
            {
              "name": "sum",
              "description": "Set sum.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "0"
            },
            {
              "name": "symbol",
              "description": "Set currency symbol.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "planned",
              "description": "Make sum planned (add brackets).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "integer",
              "description": "Make sum integer.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "sign",
              "description": "Set sign for sum.",
              "value": {
                "kind": "expression",
                "type": "'default' | 'positive' | 'negative'"
              },
              "default": "default"
            },
            {
              "name": "symbolAlign",
              "description": "Set align for currency symbol.",
              "value": {
                "kind": "expression",
                "type": "'right' | 'left'"
              },
              "default": "right"
            },
            {
              "name": "size",
              "description": "Set text size of sum.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl'"
              },
              "default": "md"
            },
            {
              "name": "weight",
              "description": "Set weight.",
              "value": {
                "kind": "expression",
                "type": "'regular' | 'medium' | 'bold'"
              },
              "default": "regular"
            },
            {
              "name": "color",
              "description": "The color of the text money.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "grayscale"
            },
            {
              "name": "decimalScale",
              "description": "Set the numeral decimal scale after the comma.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "UIService.get(defaultConfig, UMoney).default.decimalScale"
            },
            {
              "name": "delimiter",
              "description": "Set the delimiter between integer and float (penny) parts.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": ","
            },
            {
              "name": "align",
              "description": "Set align for money block.",
              "value": {
                "kind": "expression",
                "type": "'right' | 'left'"
              },
              "default": "right"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "divided",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add something before money amount."
            },
            {
              "name": "right",
              "description": "Use it to add something after money amount."
            }
          ],
          "source": {
            "module": "vueless/ui.text-money/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UNotify",
          "description": "",
          "attributes": [
            {
              "name": "xPosition",
              "description": "A position on the x-axis.",
              "value": {
                "kind": "expression",
                "type": "'left' | 'center' | 'right'"
              },
              "default": "center"
            },
            {
              "name": "yPosition",
              "description": "A position on the y-axis.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'bottom'"
              },
              "default": "top"
            },
            {
              "name": "vHtml",
              "description": "Use v-html to render notification label and description content.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            }
          ],
          "source": {
            "module": "vueless/ui.notify/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UPage",
          "description": "",
          "attributes": [
            {
              "name": "width",
              "description": "The width of the page.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | 'wide'"
              },
              "default": "wide"
            },
            {
              "name": "title",
              "description": "Set page title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "titleSize",
              "description": "Set page title size.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'"
              },
              "default": "lg"
            },
            {
              "name": "description",
              "description": "Set page description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "backRoute",
              "description": "Set Vue router route params for back arrow.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "gray",
              "description": "Set gray background color.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "mobileFooterReverse",
              "description": "Reverse left and right footer blocks (in a mobile version only).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "fixedRounding",
              "description": "Stick right page rounding.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "header-before",
              "description": "Use it to add something before the header."
            },
            {
              "name": "header-left-before",
              "description": "Use it to add something before left side of the header."
            },
            {
              "name": "header-left",
              "description": "Use it to customise left side of the header."
            },
            {
              "name": "header-left-after",
              "description": "Use it to add something after left side of the header."
            },
            {
              "name": "header-right",
              "description": "Use it to customise right side of the header."
            },
            {
              "name": "header-after",
              "description": "Use it to add something after the header."
            },
            {
              "name": "default",
              "description": "Use it to add main content."
            },
            {
              "name": "footer-before",
              "description": "Use it to add something before the footer."
            },
            {
              "name": "footer-left",
              "description": "Use it to add something to the left side of the footer."
            },
            {
              "name": "footer-right",
              "description": "Use it to add something to the right side of the footer."
            },
            {
              "name": "footer-after",
              "description": "Use it to add something after the footer."
            }
          ],
          "source": {
            "module": "vueless/ui.container-page/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UPagination",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Current page number.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "null"
            },
            {
              "name": "disabled",
              "description": "Disable navigation buttons.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "perPage",
              "description": "Number of items per page.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "20"
            },
            {
              "name": "total",
              "description": "Total number of items.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "0"
            },
            {
              "name": "limit",
              "description": "Limit of visible pages.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "5"
            },
            {
              "name": "ellipsis",
              "description": "Show ellipsis.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "prevLabel",
              "description": "Prev button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "&lsaquo;"
            },
            {
              "name": "nextLabel",
              "description": "Next button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "&rsaquo;"
            },
            {
              "name": "firstLabel",
              "description": "First button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "&laquo;"
            },
            {
              "name": "lastLabel",
              "description": "Last button label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "&raquo;"
            },
            {
              "name": "showFirst",
              "description": "Show the first control.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "showLast",
              "description": "Show the last control.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "change"
            },
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "first-label"
            },
            {
              "name": "prev-label"
            },
            {
              "name": "next-label"
            }
          ],
          "source": {
            "module": "vueless/ui.navigation-pagination/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "URadio",
          "description": "",
          "attributes": [
            {
              "name": "value",
              "description": "Radio value.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Radio label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Radio description.",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "default": "\"\""
            },
            {
              "name": "name",
              "description": "Radio name.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Radio size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "Radio color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'"
              },
              "default": "brand"
            },
            {
              "name": "labelAlign",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "UIService.get(defaultConfig, URadio).default.labelAlign"
            },
            {
              "name": "disabled",
              "description": "Set radio disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "checked",
              "description": "Set radio checked.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default"
            },
            {
              "name": "footer"
            }
          ],
          "source": {
            "module": "vueless/ui.form-radio/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "URadioCard",
          "description": "",
          "attributes": [
            {
              "name": "name",
              "required": true,
              "description": "Set radio card name.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "options",
              "description": "Set options for component.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "modelValue",
              "description": "Set component value.",
              "value": {
                "kind": "expression",
                "type": "string|number|boolean"
              },
              "default": "\"\""
            },
            {
              "name": "gridCols",
              "description": "Set grid cols number.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "2"
            },
            {
              "name": "withIcon",
              "description": "Show / hide component icon.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "color",
              "description": "The color of the icon.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'black' | 'white' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'"
              },
              "default": "brand"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "labelAlign",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "top"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "icon",
              "description": "Use it to add icon."
            }
          ],
          "source": {
            "module": "vueless/ui.form-radio-card/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "URadioGroup",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Radio group selected value.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Radio group label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Input description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "error",
              "description": "Error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Radio size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "Radio group color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'"
              },
              "default": "brand"
            },
            {
              "name": "name",
              "description": "Radio group name (sets for each radio).",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "disabled",
              "description": "Disable the input.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"radio\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.form-radio-group/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "URow",
          "description": "",
          "attributes": [
            {
              "name": "noMobile",
              "description": "Disables mobile adaptivity.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add something inside."
            }
          ],
          "source": {
            "module": "vueless/ui.container-row/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "USelect",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Select value.",
              "value": {
                "kind": "expression",
                "type": "string|number|array"
              },
              "default": "\"\""
            },
            {
              "name": "options",
              "description": "Select options.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "label",
              "description": "Select label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "labelAlign",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "topInside"
            },
            {
              "name": "placeholder",
              "description": "Select placeholder.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Select description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "error",
              "description": "Select error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "Select size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "openDirection",
              "description": "Select open direction.",
              "value": {
                "kind": "expression",
                "type": "'auto' | 'top' | 'bottom'"
              },
              "default": "auto"
            },
            {
              "name": "labelKey",
              "description": "Label key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "label"
            },
            {
              "name": "valueKey",
              "description": "Value key in the item object of options.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "id"
            },
            {
              "name": "groupLabel",
              "description": "Set a name of the property containing the group label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"label\""
            },
            {
              "name": "groupValues",
              "description": "Set a name of the property containing the group values.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "name",
              "description": "name attribute to match optional label element.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "optionsLimit",
              "description": "Number of options displayed in the dropdown.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "100"
            },
            {
              "name": "maxHeight",
              "description": "Sets maxHeight style value of the dropdown",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "300"
            },
            {
              "name": "optionHeight",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "40"
            },
            {
              "name": "noClear",
              "description": "Allow clearing selected value.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "multiple",
              "description": "Allows multiple selection.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "searchable",
              "description": "Allows to search value in a list.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "true"
            },
            {
              "name": "disabled",
              "description": "Disable the select.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "addOption",
              "description": "Show \"Add new option\" button in the list.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "open"
            },
            {
              "name": "close"
            },
            {
              "name": "searchChange"
            },
            {
              "name": "remove"
            },
            {
              "name": "update:modelValue"
            },
            {
              "name": "select"
            },
            {
              "name": "addOption"
            },
            {
              "name": "change"
            }
          ],
          "slots": [
            {
              "name": "after-caret",
              "description": "Use it to add something after caret."
            },
            {
              "name": "before-caret",
              "description": "Use it to add something after caret."
            },
            {
              "name": "selected-label",
              "description": "Use it to add selected value label."
            },
            {
              "name": "selected-label-after",
              "description": "Use it to add selected value label."
            },
            {
              "name": "left",
              "description": "Use it to add some component before text."
            },
            {
              "name": "before-option",
              "description": "Use it to add something before option."
            },
            {
              "name": "option"
            },
            {
              "name": "after-option",
              "description": "Use it to add something after option."
            }
          ],
          "source": {
            "module": "vueless/ui.form-select/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UStepper",
          "description": "",
          "attributes": [
            {
              "name": "title",
              "description": "Set component title.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "step",
              "description": "Set step number.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "1"
            },
            {
              "name": "color",
              "description": "Icon color.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "totalSteps",
              "description": "Set total number of steps.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "null"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "source": {
            "module": "vueless/ui.navigation-stepper/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "USwitch",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Set switch value.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "labelAlign",
              "description": "Label alignment.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "left"
            },
            {
              "name": "label",
              "description": "Set label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "description",
              "description": "Set description.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "size",
              "description": "The size of the switch.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "color",
              "description": "The color of the switch.",
              "value": {
                "kind": "expression",
                "type": "'brand' | 'grayscale' | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose' | 'white'"
              },
              "default": "brand"
            },
            {
              "name": "toggleIcon",
              "description": "Show on / off icon inside circle.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "toggleLabel",
              "description": "The label variant of the switch.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "disabled",
              "description": "Show on / off icon inside circle.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "id",
              "description": "@ignore: Unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "source": {
            "module": "vueless/ui.form-switch/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UTab",
          "description": "",
          "attributes": [
            {
              "name": "label",
              "required": true,
              "description": "@ignore: Tab label.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "Tab value.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "disabled",
              "description": "@ignore: Make tab disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add something instead of label."
            }
          ],
          "source": {
            "module": "vueless/ui.navigation-tab/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UTable",
          "description": "",
          "attributes": [
            {
              "name": "columns",
              "required": true,
              "description": "Table columns.",
              "value": {
                "kind": "expression",
                "type": "array"
              }
            },
            {
              "name": "rows",
              "required": true,
              "description": "Table rows data.",
              "value": {
                "kind": "expression",
                "type": "array"
              }
            },
            {
              "name": "dateDivider",
              "description": "Show/hide date divider or set label for specific date.",
              "value": {
                "kind": "expression",
                "type": "array|boolean"
              },
              "default": "false"
            },
            {
              "name": "selectable",
              "description": "Enable selecting table rows.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "compact",
              "description": "Makes the table compact (fewer spacings).",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "stickyHeader",
              "description": "Set header sticky.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "stickyFooter",
              "description": "Set footer sticky.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "nesting",
              "description": "Sets the nesting level from which folding button need to be shown.",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "default": "[object Object]"
            },
            {
              "name": "filters",
              "description": "Indicate if filters applied.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "resource",
              "description": "Set loader resource name to activate table top loader exact for that resource.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "clickRow"
            },
            {
              "name": "update:rows"
            }
          ],
          "slots": [
            {
              "name": "thead-actions",
              "description": "Use it to add actions instead table head (it appears when you select rows in table)."
            },
            {
              "name": "`thead-${column.key}`",
              "description": "Use it to customise table column."
            },
            {
              "name": "`thead-${column.key}-after`",
              "description": "Use it to add content after table column."
            },
            {
              "name": "before-header-row"
            },
            {
              "name": "before-first-row",
              "description": "Use it to add something before first row."
            },
            {
              "name": "`cell-${key}`",
              "description": "Use it to customise table cell item (in whole column)."
            },
            {
              "name": "cell-other"
            },
            {
              "name": "after-last-row",
              "description": "Use it to add something after last row."
            },
            {
              "name": "empty-table-msg"
            },
            {
              "name": "tfoot",
              "description": "Use it to add something in table footer."
            }
          ],
          "source": {
            "module": "vueless/ui.data-table/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UTableCell",
          "description": "",
          "attributes": [
            {
              "name": "compact",
              "description": "Makes the cell more narrow.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.data-table-cell/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UTabs",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Selected tab value.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "options",
              "description": "Tab options.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[\n  {\n    label: \"\",\n    value: \"\",\n    disabled: false,\n  },\n]"
            },
            {
              "name": "size",
              "description": "Tabs size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "underlined",
              "description": "Add the bottom line along the entire length.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.navigation-tabs/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UText",
          "description": "",
          "attributes": [
            {
              "name": "html",
              "description": "НTML markdown or plain text.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "undefined"
            },
            {
              "name": "size",
              "description": "Text size.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "align",
              "description": "Text align.",
              "value": {
                "kind": "expression",
                "type": "'left' | 'center' | 'right'"
              },
              "default": "left"
            },
            {
              "name": "line",
              "description": "Remove line height.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "UIService.get(defaultConfig, UText).default.line"
            },
            {
              "name": "config",
              "description": "Component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use it to add something."
            }
          ],
          "source": {
            "module": "vueless/ui.text-block/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UTextarea",
          "description": "",
          "attributes": [
            {
              "name": "size",
              "description": "Set input size.",
              "value": {
                "kind": "expression",
                "type": "'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "modelValue",
              "description": "Set component value.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "placeholder",
              "description": "Set component placeholder.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Set input label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "labelAlign",
              "description": "Set label placement related from the default slot.",
              "value": {
                "kind": "expression",
                "type": "'top' | 'topInside' | 'topWithDesc' | 'bottom' | 'left' | 'right'"
              },
              "default": "topInside"
            },
            {
              "name": "description",
              "description": "Set description for component.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "readonly",
              "description": "Make textarea read only.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "disabled",
              "description": "Make input disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "type",
              "description": "Set input type.",
              "value": {
                "kind": "expression",
                "type": "'text' | 'number' | 'email' | 'tel' | 'password' | 'url'"
              },
              "default": "text"
            },
            {
              "name": "inputMode",
              "description": "Set proper keyboard on mobile devices.",
              "value": {
                "kind": "expression",
                "type": "'text' | 'none' | 'decimal' | 'tel' | 'numeric' | 'search' | 'email' | 'url' | ''"
              },
              "default": "text"
            },
            {
              "name": "noAutocomplete",
              "description": "Disable browsers autocomplete.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "error",
              "description": "Set error message.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "false"
            },
            {
              "name": "rows",
              "description": "Set number of visible rows.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "2"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "change"
            },
            {
              "name": "click"
            },
            {
              "name": "focus"
            },
            {
              "name": "blur"
            },
            {
              "name": "update:modelValue"
            },
            {
              "name": "mousedown"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add some component before text."
            },
            {
              "name": "right",
              "description": "Use it to add some component after text."
            }
          ],
          "source": {
            "module": "vueless/ui.form-textarea/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UToggle",
          "description": "",
          "attributes": [
            {
              "name": "name",
              "required": true,
              "description": "Set buttons name.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "options",
              "description": "Set data for buttons.",
              "value": {
                "kind": "expression",
                "type": "array"
              },
              "default": "[]"
            },
            {
              "name": "modelValue",
              "description": "Set current value.",
              "value": {
                "kind": "expression",
                "type": "string|number|array"
              },
              "default": "() => (!this.multiple ? \"\" : [])"
            },
            {
              "name": "multiple",
              "description": "Allow to select a few options and return them as array.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "size",
              "description": "The size of the buttons.",
              "value": {
                "kind": "expression",
                "type": "'xs' | 'sm' | 'md' | 'lg'"
              },
              "default": "md"
            },
            {
              "name": "block",
              "description": "Make the toggle fill the width with its container.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "source": {
            "module": "vueless/ui.button-toggle/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "UToggleItem",
          "description": "",
          "attributes": [
            {
              "name": "modelValue",
              "description": "Set data for button.",
              "value": {
                "kind": "expression",
                "type": "string|number|array"
              },
              "default": "\"\""
            },
            {
              "name": "value",
              "description": "Set value for checkbox state.",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "default": "\"\""
            },
            {
              "name": "label",
              "description": "Set label.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            },
            {
              "name": "disabled",
              "description": "Make item disabled.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false"
            },
            {
              "name": "variant",
              "description": "The variant of the button.",
              "value": {
                "kind": "expression",
                "type": "'primary' | 'secondary' | 'thirdary'"
              },
              "default": "primary"
            },
            {
              "name": "id",
              "description": "@ignore: Generates unique element id.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "() => getRandomId()"
            },
            {
              "name": "config",
              "description": "Sets component ui config object.",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            },
            {
              "name": "dataCy",
              "description": "Sets data-cy attribute for automated testing.",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "default": "\"\""
            }
          ],
          "events": [
            {
              "name": "update:modelValue"
            }
          ],
          "slots": [
            {
              "name": "left",
              "description": "Use it to add some content before label."
            },
            {
              "name": "default",
              "description": "Use it to add some content instead of label."
            },
            {
              "name": "right",
              "description": "Use it to add some content after label."
            }
          ],
          "source": {
            "module": "vueless/ui.button-toggle-item/index.vue",
            "symbol": "default"
          }
        },
        {
          "name": "YearView",
          "description": "",
          "attributes": [
            {
              "name": "selectedDate",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "activeDate",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "activeMonth",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "date|null"
              }
            },
            {
              "name": "locale",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "object"
              }
            },
            {
              "name": "dateFormat",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "maxDate",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "minDate",
              "value": {
                "kind": "expression",
                "type": "date|string"
              },
              "default": "undefined"
            },
            {
              "name": "config",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "default": "{}"
            }
          ],
          "events": [
            {
              "name": "input"
            }
          ],
          "source": {
            "module": "vueless/ui.form-calendar/components/YearView.vue",
            "symbol": "default"
          }
        }
      ]
    }
  }
}